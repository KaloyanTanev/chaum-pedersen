# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cp_pb2 as cp__pb2


class CpStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/Cp/Register',
                request_serializer=cp__pb2.RegisterRequest.SerializeToString,
                response_deserializer=cp__pb2.RegisterResponse.FromString,
                )
        self.LoginRoundOne = channel.unary_unary(
                '/Cp/LoginRoundOne',
                request_serializer=cp__pb2.LoginRequestRoundOne.SerializeToString,
                response_deserializer=cp__pb2.LoginResponseRoundOne.FromString,
                )
        self.LoginRoundTwo = channel.unary_unary(
                '/Cp/LoginRoundTwo',
                request_serializer=cp__pb2.LoginRequestRoundTwo.SerializeToString,
                response_deserializer=cp__pb2.LoginResponseRoundTwo.FromString,
                )


class CpServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginRoundOne(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginRoundTwo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CpServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=cp__pb2.RegisterRequest.FromString,
                    response_serializer=cp__pb2.RegisterResponse.SerializeToString,
            ),
            'LoginRoundOne': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginRoundOne,
                    request_deserializer=cp__pb2.LoginRequestRoundOne.FromString,
                    response_serializer=cp__pb2.LoginResponseRoundOne.SerializeToString,
            ),
            'LoginRoundTwo': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginRoundTwo,
                    request_deserializer=cp__pb2.LoginRequestRoundTwo.FromString,
                    response_serializer=cp__pb2.LoginResponseRoundTwo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Cp', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Cp(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cp/Register',
            cp__pb2.RegisterRequest.SerializeToString,
            cp__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoginRoundOne(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cp/LoginRoundOne',
            cp__pb2.LoginRequestRoundOne.SerializeToString,
            cp__pb2.LoginResponseRoundOne.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoginRoundTwo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cp/LoginRoundTwo',
            cp__pb2.LoginRequestRoundTwo.SerializeToString,
            cp__pb2.LoginResponseRoundTwo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
